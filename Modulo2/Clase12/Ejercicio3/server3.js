// Ejercicio 3: Sistema de GestiÃ³n de PelÃ­culas ðŸŽ¬
// Consigna:
// Implementar un sistema de gestiÃ³n de pelÃ­culas donde el cliente pueda
// solicitar informaciÃ³n sobre una pelÃ­cula especÃ­fica a travÃ©s de su tÃ­tulo. El
// servidor procesarÃ¡ la solicitud, buscarÃ¡ la pelÃ­cula en una base de datos
// simulada (archivo JSON) y devolverÃ¡ la informaciÃ³n al cliente.
// Pasos a seguir:
// 1. Servidor TCP:
// o El servidor debe escuchar en el puerto 4002.
// o Debe recibir solicitudes del cliente que incluyan el tÃ­tulo de
// una pelÃ­cula.
// o Utilizar el patrÃ³n MVC:
// â–ª Modelo: Encargado de leer el archivo JSON
// (movies.json) que contiene la lista de pelÃ­culas y buscar
// la pelÃ­cula por tÃ­tulo.
// â–ª Vista: Encargada de formatear la respuesta que se
// enviarÃ¡ al cliente (en formato JSON).
// â–ª Controlador: Encargado de recibir la solicitud del
// cliente, llamar al modelo para obtener los datos y
// luego pasar esos datos a la vista para formatear la
// respuesta.
// o El servidor debe enviar la respuesta al cliente y cerrar la
// conexiÃ³n
const net = require('net');
const {handleMovieRequest} = require('./controllers/movieController');

const PORT = 4002;

const server = net.createServer((socket) => {
    console.log('Cliente conectado al servidor');

    socket.on('data', (data) => {
        const movieTitle = data.toString().trim();

        const response = handleMovieRequest(movieTitle);
        socket.write(response);
        socket.end();
    })
    socket.on('end', () => {
        console.log('Cliente desconectado');
    });

    socket.on('error', (err) => {
        console.error('Error en el servidor:', err);
    });
})

server.listen(PORT, () => {
    console.log(`Servidor escuchando en el puerto ${PORT}`);
})